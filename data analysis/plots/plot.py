from sys import argv
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import seaborn as sn

class GraphDrawer:
        def __init__(self):
                self.figure = None
                self.graph = None
                self.width = 0
                self.height = 0

class MOF:
        def __init__(self, name):
                self.name = name
                self.data = {}
                self.drawer = None

        def set_dataframe(self, data, identifier):
                """Stores data under given identifier.

                Args:
                    data (DataFrame): Pandas Dataframe with "en" and "dos" columns.
                    identifier (String): Custom identifier for the given data.
                """
                self.data[identifier] = data

        def plot(self, identifier, label=None, color=None, linewidth = None):
                """Plots the data with given identifier on the active graph.

                Args:
                    identifier (String): Name of the data (previously set with set_dataframe)
                    label (String, optional): Label for the plot (appears in the legend). Defaults to None.
                    color (String, optional): Colour for the plot. Defaults to None (and uses autogenerated PyPlot colours).
                    linewidth (Float, optional): Thickness of the plot lines. Default =  1.5
                """
                data = self.data[identifier]
                data = data[(-self.drawer.width < data["en"]) & (data["en"] < self.drawer.width)]
                self.drawer.height = max(
                        self.drawer.height,
                        max(data["dos"])
                )
                self.drawer.graph.plot(data["en"], data["dos"], label = label, color = color, linewidth = linewidth)
        
        def start_graph(self, graph_width):
                """Starts drawing the graph.

                Args:
                    graph_width (int): x range of the graph
                """
                plt.rcParams["font.family"] = "Arial"
                plt.rcParams.update({'font.size': 14})
                plt.rc('xtick', labelsize=12)
                plt.rc('ytick', labelsize=12)
                self.drawer = GraphDrawer()
                self.drawer.figure = plt.figure()
                grid_spec = self.drawer.figure.add_gridspec(1, hspace=0)
                self.drawer.graph = grid_spec.subplots(sharex = True, sharey = True)
                self.drawer.width = graph_width
                
        
        def end_graph(self, path, ystep):
                """Finalizes graph and save as image.

                Args:
                    path (String): fully qualified file name
                    ystep (int): step of the y axis
                """
                graph_height = int((self.drawer.height + 5) / ystep) * ystep + ystep
                #self.drawer.graph.vlines(0, -graph_height, graph_height, "red", "dashed", label = "Fermi energy", linewidth=1)
                self.drawer.graph.vlines(0, -graph_height, graph_height, "red", "dashed", linewidth=1)
                self.drawer.graph.axhline(y=0, color='k', linewidth=1)
                self.drawer.graph.set_xlim(-self.drawer.width, self.drawer.width)
                self.drawer.graph.set_ylim(-graph_height, graph_height)
                self.drawer.graph.set_yticks(range(-graph_height,graph_height + 1, ystep))
                self.drawer.graph.set_xticks(range(-self.drawer.width, self.drawer.width+1))
                self.drawer.graph.set_xlabel("Energy (eV)")
                self.drawer.graph.set_ylabel("DoS (eln/cell)")
                plt.legend(loc="best", fontsize = 9, frameon = False, labelspacing = 0.2) 
                #save and show figure
                plt.savefig(path)
                plt.close()
                
                
#decide where to run it                
for root, dirs, files in os.walk("bands"):
        for file in files:
                if file == "TDOS.dat":
                        fold = MOF(root)
                        print(root)
                        #read data
                        data_up = pd.read_csv(root+"\\TDOS.dat", delim_whitespace=True, header = 0, usecols=[0,1], names = ["en","dos"])
                        data_dw = pd.read_csv(root+"\\TDOS.dat", delim_whitespace=True, header = 0, usecols=[0,2], names = ["en","dos"])
                        fold.set_dataframe(data_up, "TDOS_UP")
                        fold.set_dataframe(data_dw, "TDOS_DOWN")      
                        atoms = []
                        for file in files:
                                if file.startswith("PDOS") and file.endswith("DW.dat"):
                                        atom = file.split("_")[1]
                                        print(atom)
                                        atoms.append(atom)                     
                                        data_PDOS_dw = pd.read_csv(root+"\\"+file, delim_whitespace=True, header = 0, usecols=[0,10], names = ["en","dos"])
                                        data_PDOS_up = pd.read_csv(root+"\\"+"PDOS_"+str(atom)+"_UP.dat", delim_whitespace=True, header = 0, usecols=[0,10], names = ["en","dos"])
                                        fold.set_dataframe(data_PDOS_up, f"PDOS_{atom}_UP")
                                        fold.set_dataframe(data_PDOS_dw, f"PDOS_{atom}_DOWN")
                                
                                        
                        #list of colours that are going to be used, in order, for each line i the graph. Can be changed                
                        colors = ["blue", "green", "magenta", "brown",  "aqua",  "purple", "cyan",  "orange", "teal", "beige"]
                        # draw graph. this section can be modified to change the graph properties. the first two graph plotted are the pDoS, while the last one is just the total DoS
                        fold.start_graph(5)
                        fold.plot("TDOS_UP", label = "Total DOS", color = "black", linewidth = 1.2)
                        fold.plot("TDOS_DOWN", color = "black", linewidth = 1.2)
                        for i, atom in enumerate(atoms):
                                fold.plot(f"PDOS_{atom}_UP", label = f"{atom}", color = colors[i], linewidth = 1)
                                fold.plot(f"PDOS_{atom}_DOWN", color = colors[i], linewidth = 1)
                        fold.end_graph(f"{root}\\TPdos.png", 10)
                        
                        fold.start_graph(3)
                        fold.plot("TDOS_UP", label = "Total DOS", color = "black", linewidth = 1.2)
                        fold.plot("TDOS_DOWN", color = "black", linewidth = 1.2)
                        for i, atom in enumerate(atoms):
                                fold.plot(f"PDOS_{atom}_UP", label = f"{atom}", color = colors[i], linewidth = 1)
                                fold.plot(f"PDOS_{atom}_DOWN", color = colors[i], linewidth = 1)
                        fold.end_graph(f"{root}\\TPdos_2.png", 10)
                        

                        fold.start_graph(5)
                        fold.plot("TDOS_UP", label = "Total DOS", color = "black", linewidth = 1)
                        fold.plot("TDOS_DOWN", color = "black", linewidth = 1)
                        fold.end_graph(f"{root}\\Tdos.png", 10)
